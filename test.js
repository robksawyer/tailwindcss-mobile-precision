const _ = require('lodash')
const cssMatcher = require('jest-matcher-css')
const postcss = require('postcss')
const tailwindcss = require('tailwindcss')

/**
 * generatePluginCss
 * Handles generating base tailwind css
 * @param {*} config
 * @param {array} pluginOptions are the options passed to the plugin
 * @return
 */
const generatePluginCss = (config, pluginOptions = []) => {
  console.log('config', config)
  return postcss(
    tailwindcss(
      _.merge(
        {
          theme: {
            screens: {
              // xs: '410px',
              //     // sm: '640px',
              //     // md: '768px',
              //     // lg: '1024px',
              //     // lgx: '1280px',
              //     // xl: '1440px',
              //     // xxl: '1800px',
              //     // xxxl: '1920px',
              //     // xxxxl: '2560px',
              //     // portrait: { raw: '(orientation: portrait)' },
              //     // print: { raw: 'print' },
              //     // dark: { raw: '(prefers-color-scheme: dark)' },
            },
          },
          variants: ['responsive'],
          corePlugins: ['display'],
          plugins: [require('./index.js')(pluginOptions)],
        },
        config
      )
    )
  )
    .process('@tailwind components; @tailwind utilities', {
      from: undefined,
    })
    .then((result) => {
      console.log('css generated', result.css)
      return result.css
    })
}

const baseCss = `
  .block {
    display: block
  }

  .inline-block {
    display: inline-block
  }

  .inline {
    display: inline
  }

  .flex {
    display: flex
  }

  .inline-flex {
    display: inline-flex
  }

  .table {
    display: table
  }

  .table-caption {
    display: table-caption
  }

  .table-cell {
    display: table-cell
  }

  .table-column {
    display: table-column
  }

  .table-column-group {
    display: table-column-group
  }

  .table-footer-group {
    display: table-footer-group
  }

  .table-header-group {
    display: table-header-group
  }

  .table-row-group {
    display: table-row-group
  }

  .table-row {
    display: table-row
  }

  .flow-root {
    display: flow-root
  }

  .grid {
    display: grid
  }

  .inline-grid {
    display: inline-grid
  }

  .hidden {
    display: none
  }
`

expect.extend({
  toMatchCss: cssMatcher,
})

test('Precision media queries are generated by default', () => {
  return generatePluginCss(null, ['psm']).then((css) => {
    return undefined
  })
})
