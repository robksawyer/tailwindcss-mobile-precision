const _ = require('lodash')
const cssMatcher = require('jest-matcher-css')
const postcss = require('postcss')
const tailwindcss = require('tailwindcss')

/**
 *
 */
const generatePluginCss = (config, pluginOptions = {}) => {
  return postcss(
    tailwindcss(
      _.merge(
        {
          theme: {
            screens: {
              xs: '410px',
              // sm: '640px',
              // md: '768px',
              // lg: '1024px',
              // lgx: '1280px',
              // xl: '1440px',
              // xxl: '1800px',
              // xxxl: '1920px',
              // xxxxl: '2560px',
              // portrait: { raw: '(orientation: portrait)' },
              // print: { raw: 'print' },
              // dark: { raw: '(prefers-color-scheme: dark)' },
            },
          },
          corePlugins: false,
          plugins: [require('./index.js')(['psm'])],
        },
        config
      )
    )
  )
    .process('@tailwind components; @tailwind utilities', {
      from: undefined,
    })
    .then((result) => {
      console.log('result', result.css)
      return result.css
    })
}

const baseCss = `
  .c-gap-wrapper {
    display: flow-root;
  }
  .c-gap-wrapper::before, .c-gap-wrapper::after {
    content: '';
    display: table;
  }
  .c-gap, .c-gap-padding {
    --gap-x: 0px;
    --gap-y: 0px;
    --gap-x-half: calc(var(--gap-x) / 2);
    --gap-x-half-negative: calc(var(--gap-x-half) * -1);
    --gap-y-half: calc(var(--gap-y) / 2);
    --gap-y-half-negative: calc(var(--gap-y-half) * -1);
    margin: var(--gap-y-half-negative) var(--gap-x-half-negative);
  }
  .c-gap > * {
    margin: var(--gap-y-half) var(--gap-x-half);
  }
  .c-gap-padding > * {
    padding: var(--gap-y-half) var(--gap-x-half);
  }
`

expect.extend({
  toMatchCss: cssMatcher,
})

test('Precision media queries are generated by default', () => {
  return generatePluginCss().then((css) => {
    expect(css).toBe('.test {}')
  })
})
